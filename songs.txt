import asyncio
from yt_dlp import YoutubeDL

# Common YDL options for MP3 extraction
ydl_opts = {
    'format': 'bestaudio/best',
    'outtmpl': '%(title)s.%(ext)s',  # Output file name
    'quiet': True,
    'noplaylist': True,  # Important for single song
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}

# Download a single YouTube video as MP3
async def download_song(url: str):
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, _download_song_sync, url)

def _download_song_sync(url):
    with YoutubeDL(ydl_opts) as ydl:
        print(f"Downloading: {url}")
        ydl.download([url])
        print("Done.")

# Download all videos from a YouTube playlist as MP3
async def download_playlist(playlist_url: str):
    playlist_opts = ydl_opts.copy()
    playlist_opts['noplaylist'] = False  # Enable full playlist
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, _download_playlist_sync, playlist_url, playlist_opts)

def _download_playlist_sync(url, options):
    with YoutubeDL(options) as ydl:
        print(f"Downloading playlist: {url}")
        ydl.download([url])
        print("Playlist downloaded.")

# Example usage
async def main():
    await download_song("https://www.youtube.com/watch?v=YOUR_VIDEO_ID")
    await download_playlist("https://www.youtube.com/playlist?list=YOUR_PLAYLIST_ID")

# Run the script
if __name__ == '__main__':
    asyncio.run(main())